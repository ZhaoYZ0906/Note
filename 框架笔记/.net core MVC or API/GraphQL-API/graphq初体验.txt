目录：
常规部分：
1 写好model
2 对应model的持久化操作
graphql部分：
3 安装包
4 model对应modeltype类
5 modeltype对应的query类
6 sechema类
7 依赖注入

涉及类：
public class Movie
    {
        public int Id { get; set; }
        public string name { get; set; }
        public DateTime ReleaseDate { get; set; }
        public string compary { get; set; }
        public int ActorId { get; set; }
        public NovieRating NovieRating { get; set; }
    }
public class Actor
    {
        public int id { get; set; }
        public string name { get; set; }
    }
[Flags]
public enum NovieRating
    {
        Unrated=0,
        G=1,
        PG=2,
        PG13=3,
        R=4,
        NC17=5
    }


常规部分：
1 写好model：对应好数据库即可
2 对应model的持久化操作：数据库增删改查

graphql部分：
3 安装包：
GraphQL：基础设施层
GraphQL.Server.Transports.AspNetCore：api层
GraphQL.Server.Transports.WebSockets：api层
GraphQL.Server.Ui.Playground：api层

4 model对应modeltype类
//对应movie实体
public  class MovieType:ObjectGraphType<Movie>
    {
        public MovieType(IActorService actorService) {
            Name = "Movie";//这个查询的名字
            Description = "";//这个查询的注释
            Field(x => x.Id).Description("");//这个查询拥有id属性它的备注是”“
            Field(x => x.name).Description("");
            Field(x => x.compary).Description("");
            Field(x => x.ReleaseDate).Description("");

            //这个查询拥有novierating，因为枚举不属于标准（标量）类型所以需要通过这种方式进行验证
            Field<NovieRatingEnum>("novierating", resolve: context => context.Source.NovieRating);

            //将这个ActorId关联到actor，这样才能嵌套查询到actor
            Field(x => x.ActorId).Description("");
            Field<ActorType>("actor",resolve:context=> actorService.GetByIdAsync(context.Source.ActorId));

            //测试
            Field<StringGraphType>("ceshi",resolve:context=> "123456789");

            //这种方法 ListGraphType<DateTimeGraphType>只支持标量类型 
            //Field<ListGraphType<DateTimeGraphType>>("","");
        }
    }
猜想：可能当拿到持久化返回的数据后根据这个类的东西进行验证
比如：拿到返回的数据id：1，到这个类中来验证，发现x => x.Id中的1为int所以验证通过
比如：拿到返回的数据novierating：xx，到这个类中来验证，发现context => context.Source.NovieRating中的xx为NovieRating所以验证通过
如果有一个不通过则返回错误信息

5 modeltype对应的query类
public class MoiveQuery : ObjectGraphType
    {
        public MoiveQuery(IMovieService movieService)
        {
            Name = "query_a1";//文档中是类型民，具体作用还不太清楚
            Description = "";

            Field<ListGraphType< MovieType>>("movies",resolve:context=> movieService.GetAsync());
        }
    }
Field<ListGraphType< MovieType>>：表示返回列表
Field< MovieType>：表示返回单个元素


6 sechema类
public class MovieSchema : Schema
    {
        public MovieSchema(IDependencyResolver dependencyResolver,MoiveQuery moiveQuery)
        {
            DependencyResolver = dependencyResolver;//这个必须有
            Query = moiveQuery;//配置根查询
        }
    }

7 依赖注入
 services.AddSingleton<IDependencyResolver>(s => new FuncDependencyResolver(s.GetRequiredService));

            services.AddSingleton<ActorType>();
            services.AddSingleton<MovieType>();
            services.AddSingleton<NovieRatingEnum>();

            services.AddSingleton<MoiveQuery>();

            services.AddSingleton<MovieSchema>();
            //写的以上三种类全部注入
	
            //注入GraphQL组件
            services.AddGraphQL(options =>
            {
                options.EnableMetrics = true;
                options.ExposeExceptions = true;//true打开报错
            })
            .AddWebSockets() //这个对应WebSockets那个包有就写没有就不写
            .AddDataLoader(); 

8 中间件
            //关于订阅
            app.UseWebSockets();

            //关于订阅
            app.UseGraphQLWebSockets<MovieSchema>("/graphql");

            //关于http请求
            app.UseGraphQL<MovieSchema>("/graphql");

            //这是添加网页ide
            app.UseGraphQLPlayground(new GraphQLPlaygroundOptions());

总结：
modeltype为底层和验证层（猜的）
query为中间层为了组织具体查询
sechema为顶层，这玩意算对外的接口么？？不清楚
resolve:context=> {} 是数据来源
嵌套和枚举在model type里面的添加方式比较特殊
UseWebSockets还没学到
有关详情见graphql-dotnet和相关文档

感悟：好像没想象中那么难
和restful相比 
restful因为前台无法控制返回的数据所以用dto，这个不用但是这个需要modeltype
restful需要资源塑性，MediaType，这个需要query和sechema
各有好处

这次笔记比较片面。


