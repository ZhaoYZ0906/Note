cli方式
1 右键项目名单击编辑xxx.csproj
2 添加编译包
<DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.Dotnet" Version="2.0.4" />
3 修改迁移后的链接字符串
4 在当前文件夹下打开命令行（cmd）
5输入dotnet ef migrations add 名字
6 执行完成后解决方案中出现一个叫migrations的文件夹，
第一个类以日期开头，是数据库脚本
第二个类是第一个类中所使用的数据结构
7 命令行输入dotnet ef  database update


Nuget方式
1 打开nuget
2 输入Add-Migration
3 完成出现一个叫migrations的文件夹，
4 输入update-database
5 修改字符串



多个DBContext的数据库迁移

1 第一个dbcontext一定数据库迁移正常

2 后面的生成迁移文件时会提示具有多个dbcontext请制定具体的dbcontext
写成 add-migration new -Context IdentityDbContext
然后会提示目标程序集不符,写成
 services.AddDbContext<xxxDbcontext>(
	d => d.UseSqlServer(Configuration.GetConnectionString("default"),
	 b => b.MigrationsAssembly("程序集名称"))
);

3 update-database时记得要指明dbcontext
update-database -Context xxxDbcontext


注意不管是nuget还是cli，进行迁移文件所在的项目必须装Microsoft.EntityFrameworkCore.SqlServer包

当context和startup不在一个项目中时，需要在context的项目中添加一个类

public class DesignTimeDbContextFactory : IDesignTimeDbContextFactory<MyContext>
    {
        public MyContext CreateDbContext(string[] args)
        {
            var builder = new DbContextOptionsBuilder<MyContext>();
            builder.UseSqlServer("Data Source=.; Database=BlogDemo;User Id=sa;Password=123");
            return new MyContext(builder.Options);
        }
    }
这样使用cli进行数据库迁移的时候才能找到相关配置，因为context和startup不在一个项目中所以读取不到依赖
注入里面的配置，在contetx中添加这个类之后就可一读取到配置，注意这个配置和依赖注入里面要一致















