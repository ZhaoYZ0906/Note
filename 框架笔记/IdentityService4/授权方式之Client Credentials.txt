Client Credentials：有时候, 资源或者叫资源服务器并不属于某个最终用户, 
也就是没有资源所有者对该资源负责. 但是客户端应用肯定还是要访问这些资源, 这时候就只能
使用Client Credentials这种授权方式了.

使用场景：一般使用于程序与程序之间的访问，因为没有客户的存在。比如定时程序等

API消费者部分：

1 建立一个链接（不知道可不可以这么理解。。）

 var client = new HttpClient();
//idp地址
var disco=  await client.GetDiscoveryDocumentAsync("http://localhost:5000");

2 获取一个token

 	var tokenResponse = await client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest() {
                Address = disco.TokenEndpoint,
		//记得和idp的客户端配置的ClientId对应起来
                ClientId = "console client",
                //密令，在idp的客户端配置那里有
                ClientSecret = "511536EF-F270-4058-80CA-1C89C192F69A",
                //请求范围
                Scope = "api1"
            });

3 请求API
 	    //call API
            var apiclient = new HttpClient();
            apiclient.SetBearerToken(tokenResponse.AccessToken);
            var respone= await apiclient.GetAsync/PostAsync/DeleteAsync等("http://localhost:5001/identity");

4 输出API返回的数据

		//Content（这个好像等于body，这个类里面没有body）
		var content = await respone.Content.ReadAsStringAsync();
                Console.WriteLine(JArray.Parse(content));


IDP部分：
由于本次使用内存验证（就是在程序内写死了，没进数据库），所以有些地方不太一样

配置config文件：
因为这种授权方式不存在真正的用户，所以用户作用域基本没用。
主要配置好API的作用域写好名字和请求范围
配置客户端部分的ClientId和AllowedScopes

将这些东西和消费者 API对应好

API部分：

1 先给资源加上这俩
    [Route("identity")]
    [Authorize]
具体方法记得加请求方式

2 依赖注入
services.AddMvcCore().AddAuthorization().AddJsonFormatters()(json输出器不用可以不加);

            services.AddAuthentication("Bearer").AddJwtBearer("Bearer", o =>
            {
		//允许访问的地址
                o.Authority = "http://localhost:5000";
		//是否启用重定向，这个没用一般得用
                o.RequireHttpsMetadata = false;
		//允许使用拥有api1令牌的客户访问
                o.Audience = "api1";
            });


3 中间件 app.UseAuthentication();







