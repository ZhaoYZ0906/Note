PassWord Credentials 与 Client Credentials的区别在于：

Client是程序与程序之间的访问，不存在最终用户，所以Client不能访问IdentityResource里面的资源。比如用户名 邮箱等
PassWord是存在用户的所以可以访问IdentityResource里面的资源

请注意：PassWord 方式只有在客户端高度信任的使用才使用，一般不推荐使用

API部分：
与Client部分一样配置即可

idp部分：
配置PassWord客户端
	      new Client{
                    ClientId="WPF client",
                    AllowedGrantTypes=GrantTypes.ResourceOwnerPassword,
                    ClientSecrets={ new Secret("WPF client".Sha256())},
                    AllowedScopes={
		    //请求的资源在配置里面要有
                        "api1",
                        IdentityServerConstants.StandardScopes.OpenId,
                        IdentityServerConstants.StandardScopes.Profile
                    }
                }

配置需要的identity资源

        public static IEnumerable<IdentityResource> GetIdentityResources()
        {
            return new IdentityResource[]
            {
                new IdentityResources.OpenId(),
                new IdentityResources.Profile(),
            };
        }
配置需要的api资源
省略

客户端部分:

 	    var client = new HttpClient();

            //request 请求发现文档。
            var disco = await client.GetDiscoveryDocumentAsync("http://localhost:5000");

	    //请求token
            var AccessResponse = await client.RequestPasswordTokenAsync(new PasswordTokenRequest
            {
                Address = disco.TokenEndpoint,
                ClientId = "WPF client",
                ClientSecret = "WPF client",
                Scope = "api1 openid profile",

                UserName = userName,
                Password = passWord
            });

	    //设置请求api和dientity的token
 	    client.SetBearerToken(AccessResponse.AccessToken);

	    //带着token去请求api资源
            var response = await client.GetAsync("http://localhost:5001/identity");

	    //带着token去请求identity资源
	    var response=await client.GetAsync(_disco.UserInfoEndpoint);













