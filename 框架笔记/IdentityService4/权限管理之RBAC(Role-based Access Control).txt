RBAC：
是基于角色的访问控制（Role-Based Access Control ）在 RBAC  中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限


1 idp使客户端可以请求到角色信息

2 客户端请求角色信息
3 将请求到的角色信息映射到前端
4 对某些页面进行权限控制

idp端：
1.1 idp使客户端可以请求到角色信息：
你需要你的用户有身份信息，当前沙盘使用内存存储用户信息，则在TestUsers类中

        public static List<TestUser> Users = new List<TestUser>
        {
            new TestUser{SubjectId = "818727", Username = "alice", Password = "alice",
                Claims =
                {
                    //加了这个
                    new Claim(JwtClaimTypes.Role,"wbb")
                }
            },     
        };

其实就是在用户的信息里面加上Claim，类型为role，名称 wbb（管理员什么的）



1.2 角色信息属于identity资源则加到identity资源列表里面
public static IEnumerable<IdentityResource> GetIdentityResources()
        {
            return new IdentityResource[]
            {               
                //roles资源名称/scope名称，下面客户请求的时候用（类似于api1）
                //角色 显示名称随便写
                //new List<string>{ "role"} claimtype指具体资源的名字  比如：new Claim(JwtClaimTypes.Role,"wbb")
                new IdentityResource("roles","角色",new List<string>{ JwtClaimTypes.Role})
            };
        }


1.3 在客户端请求的范围内加上角色
AllowedScopes={
                        "roles",//这个和identity资源的资源名称要一致
                    }



2 客户端请求角色信息
在请求的scope里面加上角色信息
 options.Scope.Add("roles");

3 将请求到的角色信息映射到前端
因为请求到的角色不会被mvc自动识别所以需要手动映射到mvc的identity model中

 //在请求到的cilam（scope里面请求的都是cilam）中的某些属性不会自动被mvc识别，需要设置映射
                    //TokenValidationParameters获取或设置用于验证标识令牌的参数。
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        NameClaimType=JwtClaimTypes.Name,
                        RoleClaimType=JwtClaimTypes.Role
                    };

2 3两部都在services.AddAuthentication .AddOpenIdConnect(OpenIdConnectDefaults.AuthenticationScheme, options => {这里面写}


4 对某些页面进行权限控制
[Authorize(Roles ="角色名")]