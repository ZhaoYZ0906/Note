动态规划的英文名是Dynamic Programming，是一种分阶段求解决策问题的数学思想。
它不仅用于编程领域，也应用于管理学、经济学、生物学。
总结起来就是一句话：大事化小，小事化了。

题目：有一座高度是10级台阶的楼梯，从下往上走，每跨一步只能向上1级或者2级台阶。
要求用程序来求出一共有多少种走法。

假设你只差最后一步就走到第10级台阶，这时候会出现几种情况？
很显然是2种，题目要求一步只许走一级或2级台阶，一种情况是从第9级走到第10级，另一种是从第8级走到第10级。
所以，暂且不管0到8级台阶是怎么走的，也不管0到9级台阶是怎么走的，想要走到第10级台阶，最后一步必然是从第8级或第9级开始。


接下来引申出一个新的问题，如果我们已知0到9级台阶的走法有X种，0到8级台阶的走法有Y种，那么0到10级台阶的走法就是X+Y种。
（不明白的可以看括号解释：第一种情况从9级到10级的走法数量和0到9级的走法数量是相等的，所以是X；第二种情况从8级到10级的走法数量又和0到8级的走法数量是相等的，所以是Y）。
推断到这就可以得出一个结论：从0到10级台阶的走法数量 = 0到9级台阶的走法数量 + 0到8级台阶的走法数量。
我们将0到10级的走法数量记为F(10); 则 F(10) = F(9) + F(8)。那么，我们如何计算F(9)和F(8)呢？
利用刚才的思路继续推断，F(9) = F(8) + F(7)，F(8) = F(7) + F(6)。这样，把一个复杂的问题分阶段进行简化，
逐步简化成简单的问题，这就是动态规划的思想。所以当只有1级台阶和2级台阶的时候有几种走法呢？显然分别是1和2，所以我们可以归纳出如下的公式：


F(1) = 1; 

F(2) = 2; 

F(n) = F(n-1) + F(n-2)  n>2

以上为推导过程，复制与csdn

个人理解：
动态规划分为两种：备忘录动态规划和自底向上动态规划
主要学习自底向上，因为动态规划个人感觉是递归的优化版本占用太多空间

自底向上动态规划：
其逻辑为先求出问题第一步的最优解，用第一步的最优解去做问题的第二步，
求出第二部最优解，拿第二部的最优解做第三部，循环直至结束。
比如上面的方案问题，求一个台阶时由n中方案，两个台阶有m种方案
因为一次可以走一步或两步，则三个台阶有n+m种方案
如果一次走1/2/3步，则一个台阶有x，两个台阶有z，三个台阶有y
则第四个台阶有x+y+z中方案

问题2：
数组的每个索引做为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 cost[i](索引从0开始)
每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。
您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。

一个台阶时只有一种走法则最优解为cost【0】
两个时有两种（直接走到第二部和先走一步再走一步），
所以最优解为cost【0】和cost【1】的最小值

三个台阶时，有两种方案（从第一个台阶走两个台阶cost【0】+cost【2】；从第二个台阶走一个台阶cost【1】+cost【2】）

此次只是初步学习，不同问题思路不同，无固定形式
















