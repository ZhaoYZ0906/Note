常量：
不可以改变的静态字段
编译时确定
使用const声明，声明的同时必须初始化

与静态只读字段比较
常量比静态字段更可使用的类型更少
常量编译时确定，而静态只读字段不是

可能需要改变并且别的程序集可能使用的时候，静态只字段比较合适

本地常量：在方法内定义的常量


静态构造函数：
每个类型只能执行一次，只能有一个构造函数，必须无参
方法名与类名必须一致

在要使用静态类的前一瞬间，编译器进行调用静态构造函数

只能使用unsafe和extern修饰符


静态类：
成全全部为静态
不可以有子类


finalizer（终结器）

class A{
A（）{}//构造函数
~A（）{}//终结器在垃圾回收机制回收之前运行，负责扫尾工作
}



局部类型：
一个类分成两部分
使用partial进行声明
如果有父类可以在一个或者多个分布类上声明，但必须一致
编译器无法保证字段的初始化顺序

partial class A{}
partial class A{}
这俩是一个类


分布方法：
partial class A{
int a1（）；//定义部分
}

partial class A{
int a1（）{//实现部分
return 1；
}
}

一个分布类中进行分布方法声明
一个分布类中进行分布方法实现

因为分布类一般存在不同的文件当中，可能第一个是自动生成的没有逻辑，第二个是手写的有逻辑，那么第一个调用分布方法时就有了逻辑。

如果只有定义部分没有实现部分，那么编译之后，定义部分就没了，如果有人调用了定义部分，那么对应部分的代码也没有了

必须为void，并且隐式为private


nameof：

class a
手写字符串 "a"
nameof(a)
使用nameof时，当需要改变a的名称可以通过ide重构，但是用字符串你就慢慢改吧！

注意：  nameof(array.length) 输出的是length！














