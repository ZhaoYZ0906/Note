main(){
    //假如有一棵树叫做tree
    //那么我们需要统计第i层的子节点个数
    //假设我们要获取第三层的节点个数
    getCount(tree,3)
}

//题目与孩子兄弟存储法无关
//这是个递归可能有点晕

//总体思路：
第一层计算结果由第二层得到，
第二层计算结果由第三层得到，
依次类推，直到第k层，k层中有一个节点则返回一个1，那么k-1层最多接收为1+1， k-2层最多接收为2+2
如果node==null，说明该条路径没有第k层

//第一次来这里的时候是A节点
int getCount(Node node, int k){

  //如果当前传递过来的这个节点为空，那么他也就不存在某一层的子节点，所以返回0
  if(node==null){
    return 0;
  }

  //如果k为1了，那么表示这就是找的第i层并且这个节点不为空
  //所以这里有一个节点，返回1
  if(k==1){
    return 1;
  }

  //如果这个节点不为空并且k不等于0（表示这不是我们想要的那一层），进行递归
  //每当进入下一层的时候k-1，这样k相当于计数器的功能帮我们确定当前层是不是要找的层
  //将左子树和右子树返回回来的子节点个数相加就是这棵树第i层的子节点个数
  return getCount(node.left, k-1) + getCount(node.right, k-1);
}



int leaves(tree t){
  //如果树为空那么肯定不存在子节点所以返回0
  if(t==null)
    return 0;
  //如果左子树为空那么该节点一定为叶子节点，并且加上兄弟节点的叶子数
  if(t.left==null){
    return 1+leaves(t.right)
  }
  else{
      return leaves(t.left)+leaves(t.right)
    }
}



void sort(head &head){
  Node *maxNode, *twoNode=head.next,*header=head.next;
  int i=0,num=0，j;

  //找出最大的节点
  while(header!=null){
    if(maxNode.data<header.data){
      maxNode=header
    }
    header=header.next;
    num++;//统计一共有多少节点
  }

  head.down=maxNode;

  while(i<num){
    header=head.next;
    while(header!=null){

      if(header.data<twoNode.data){
        twoNode=header;
      }

      if((header.data<maxNode.data) && (header.data>twoNode.data)){
        twoNode=header;
      }

      header=header.next;
    }
    maxNode.down=twoNode;
    maxNode=twoNode;

    i++;
  }
}




void sort(head &head){
  Node *header=head.next,*downing;
  int i=0,num=0，j;
  while(header!=null){
    downing=head.down

    if(downing!=null){

      while(downing!=null){
        if(header.data<downing.data && header.data>downing.down.data)
        {
          header.down=downing.down;
          downing.down=header;
          break;
        }
        downing=downing.down;
      }

    }else{
      downing=header;
      header=header.next;
      continue;
    }

  }
}


void sort(Node head){
  Node *p,*s,*q;
  p=head.next;

  //如果p为空那么遍历结束排序完成
  
  while(p!=null){

    //重置s和q的位置
    s=head;
    q=head.down;

    //如果q为空那么已经遍历到末尾所以循环结束
    while((q!=null)&&(p.data<q.data)){
      //如果p的值小于q的值，那么记录s和q的位置
      s=q;
      q=q.down;
    }
    //遍历结束之后，q的值大于p的值，s的值小于p的值。找到合适插入p的位置

    //将p插入到s和q中间
    s.down=p;
    p.down=q;
    p=p.next
  }
}


int sum()
{
  //sum负责所有数的和，one负责一个属阶加的和
  int sum=0,one;

  //输出1-100，所以i从1开始 大于100的时候结束
  for(int i=1;i<=100;i++){

    //每次循环代表一个数的阶加，所以清空上一次的数
    one=0;

    //将从1-i加起来，使用one记录
    for(int j=1;j<=i;j++){
      one+=j;
    }

    将这个数的阶加结果加到sum
    sum+=one;
  }

  //循环结束，sum最后的值为加起来的值，所以返回sum
  return sum;
}

//思路 顺序遍历整个链表，如果当前节点的值小于1，则将前一个节点的next指向下一个节点（将本节点删除） 
//因此需要两个指针q，p。q负责记录前一个节点，p负责记录当前节点，下一个节点可以通过p.next访问
void delneg(Node h){
  Node q,p;
  q=h;//初始值为表头
  p=h.next;//初始值为第一个元素

  while(p!=null){

    //如果data<1
    if(p.data<1){
      //将上一个节点的next指向下一个节点
      q.next=p.next;
      //p往后走一步，q不用往后走一步，因为q已经指向了p的next
      p=p.next;
    }
    else{
      //如果大于1
      //q往后走一步
      q=q.next;
      //p往后走一步
      p=p.next;
    }
  }
}




//思路：递归遍历整棵树，使用一个变量记录当前是第几层，
//因为该树使用孩子兄弟存储法，
//所以左节点为空的时候，该节点为叶子节点，所以输出值和层数
//tree表示树，num表示层数
void nodedepth(TNode tree){
    //主要为了确定第一层为1
    nodedepth2(tree,1);
}

void nodedepth2(TNode tree,int num){
    //如果当前节点为空，则结束
    if(tree==null){
      return;
    }

    //如果左孩子节点为空则证明该节点在孩子兄弟存储法中为叶子节点
    //输出data的值和层数
    if(tree.firstchild==null){
      printf("输出的data为：%c，输出的层数为：%d",&tree.data,num)
    }
    //继续进行递归
    //注意孩子节点需要层数加1，但是兄弟节点不需要，因为当前节点和兄弟节点在同一层
    nodedepth2(tree.firstchild,num++);
    nodedepth2(tree.nextsibling,num);
}
