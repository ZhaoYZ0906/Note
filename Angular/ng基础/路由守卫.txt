路由守卫：也可以理解为路由过滤器，在跳转路由之前，进行某些动作，根据动作的结果决定继续跳转或者重定向到其他路由

使用方法：
1 创建一个守卫的文件夹
ng g guard auth
名叫auth的守卫文件（和服务文件差不多，只是导入的库不一样）

2 在文件中实现CanActivate/CanActivateChild 接口

export class AuthGuard implements CanActivate {
  constructor(private router: Router) {}

  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): boolean {
    if (1 == 1) {
      return true;
    }
    this.router.navigate(['/mail']);
    return false;
  }
}

返回true则继续跳转，false则不跳转（需要写个重定向）


3 把auth文件进行注入（生成的文件默认全局注入）

4 在路由中添加
  {
    path: 'admin',
    component: AdminComponent,
    canActivate: [AuthGuard],//实现canActivate
    children: [
      {
        path: '',
        canActivateChild: [AuthGuard],//实现canActivateChild:
        children: [
          { path: 'crises', component: ManageCrisesComponent },
          { path: 'heroes', component: ManageHeroesComponent },
          { path: '', component: AdminDashboardComponent }
        ]
      }
    ]
  }


这样对应路由跳转必须先走路由守卫的方法，根据方法决定是否跳转